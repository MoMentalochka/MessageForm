{"version":3,"sources":["components/Form/Form.module.css","components/MessagePage/MessageStatus.module.css","components/File/File.module.css","components/MessagePage/MessagePage.module.css","components/FormPage/FormPage.module.css","DragDrop/DragDrop.module.css","components/File/File.jsx","validation/BasicScheme.js","DragDrop/DragDrop.js","components/Form/Form.jsx","components/MessagePage/MessageStatus.jsx","components/MessagePage/MessagePage.jsx","components/FormPage/FormPage.jsx","Api/MessageApi.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormFile","props","blok","fileData","map","b","index","error","class","role","name","className","styles","key","file","fa","aria-hidden","split","length","slice","delete","onClick","DeleteFile","BasicFormSchema","Yup","shape","for_name","min","max","required","from_name","for_email","email","from_email","theme","message","spec","drop","monitor","FilesData","getItem","files","i","reader","FileReader","onload","size","content","result","encoding","UpdateFiles","readAsDataURL","UploadFilesToggler","TargetBox","connectDropTarget","this","dropZone","React","Component","DropTarget","NativeTypes","FILE","connect","dropTarget","MessageForm","state","UploadFiles","DndProvider","backend","Backend","initialValues","validationSchema","onSubmit","values","resetForm","status","SendMessage","setTimeout","render","errors","touched","isValid","action","container","encType","title","form_blok","form_label","col","type","form_control","placeholder","style","paddingTop","paddingBottom","File","form_file","form_file_label","form_blok10","btn","disabled","MessageStatus","color","header","data","date","green","red","MessagePage","MessageStatusItems","messageData","FormPage","Sending","some","form","Form","loading","ClearHistory","sendsay","Sendsay","auth","login","password","MessageApi","Track","id","request","e","App","month","Date","getMonth","day","getDate","setState","then","res","check","setInterval","obj","clearTimeout","last","pop","copyFileData","splice","localStorage","removeItem","JSON","parse","nextProps","nextState","setItem","stringify","Validate","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b557f31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Form_title__3wm12\",\"form_blok\":\"Form_form_blok__3dTUf\",\"form_blok10\":\"Form_form_blok10__21c3T\",\"form_label\":\"Form_form_label__1aIk9\",\"form_control\":\"Form_form_control__Hwa1W\",\"col\":\"Form_col__1XT_p\",\"form_file\":\"Form_form_file__1WXug\",\"form_file_label\":\"Form_form_file_label__2VDqP\",\"btn\":\"Form_btn__1yeNR\",\"fa\":\"Form_fa__18oz7\",\"DragDrop\":\"Form_DragDrop__a3VCe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MessageStatus_container__3-c40\",\"header\":\"MessageStatus_header__3auD0\",\"data\":\"MessageStatus_data__iST_V\",\"theme\":\"MessageStatus_theme__3iQHu\",\"status\":\"MessageStatus_status__2SPFx\",\"green\":\"MessageStatus_green__15Vaq\",\"red\":\"MessageStatus_red__1D7QE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blok\":\"File_blok__3bG5Y\",\"file\":\"File_file__1YX0G\",\"fa\":\"File_fa__HJqSa\",\"delete\":\"File_delete__2o7vU\",\"error\":\"File_error__1BmJT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MessagePage_container__dMst3\",\"header\":\"MessagePage_header__249WP\",\"data\":\"MessagePage_data__1Cvpm\",\"theme\":\"MessagePage_theme__T0lyP\",\"status\":\"MessagePage_status__16r_O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormPage_container__1hWhO\",\"form\":\"FormPage_form__HuxW-\",\"fa\":\"FormPage_fa__L4A1i\",\"loading\":\"FormPage_loading__3vV0f\",\"DragDrop\":\"FormPage_DragDrop__3XTm1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropZone\":\"DragDrop_dropZone__2IOCp\"};","import React from 'react'\r\nimport styles from './File.module.css'\r\n\r\nconst FormFile = (props) => {\r\n    \r\n    //==== Формируем модули для оттображения файлов ====\r\n    let blok = props.fileData.map((b, index) =>\r\n        (!b.error)?\r\n\r\n        <div className={styles.blok} key={index}>\r\n            <div className={styles.file}>\r\n                <i className={styles.fa + \" fa fa-paperclip\"} aria-hidden=\"true\"></i>\r\n                {b.name.split('.')[0].length > 15 ? (b.name.split('.')[0].slice(0, 15) + \"...\" + b.name.split('.')[1]) : b.name}\r\n            </div>\r\n\r\n            <div className={styles.delete}>\r\n                <i className={styles.fa + \" fa fa-trash-o\"} aria-hidden=\"true\"></i>\r\n                <span onClick={() => props.DeleteFile(index)} >Удалить </span>\r\n            </div>\r\n        </div>\r\n        :\r\n        <div class=\"alert alert-danger\" role=\"alert\">\r\n  Ошибка загрузки - {b.name}{b.error}\r\n</div>\r\n\r\n    )\r\n\r\n    return (\r\n        <div >\r\n            {blok}\r\n        </div>\r\n    )\r\n}\r\nexport default FormFile ","import * as Yup from \"yup\";\r\n//==== Правила для валидации ====\r\nconst BasicFormSchema = Yup.object().shape({\r\n    for_name: Yup.string()\r\n    .min(2, \"Минимум 2 символа*\")\r\n    .max(40, \"Максимум 40 символов*\")\r\n    .required('Обязательное поле*'),\r\n\r\n    from_name: Yup.string()\r\n    .min(2, \"Минимум 2 символа*\")\r\n    .max(40, \"Максимум 40 символов*\")\r\n    .required('Обязательное поле*'),\r\n\r\n    for_email: Yup.string()\r\n    .email(\"Некорректный Email адрес*\")\r\n    .required('Обязательное поле*'),\r\n\r\n    from_email: Yup.string()\r\n    .email(\"Некорректный Email адрес*\")\r\n    .required('Обязательное поле*'),\r\n\r\n    theme: Yup.string()\r\n    .min(2, \"Минимум 2 символа*\")\r\n    .max(30, \"Максимум 30 символов*\")\r\n    .required('Обязательное поле*'),\r\n\r\n    message: Yup.string()\r\n    .min(2, \"Минимум 2 символа\")\r\n    .max(300, \"Максимум 300 символов*\")\r\n    .required('Обязательное поле*'),\r\n  \r\n});\r\nexport default BasicFormSchema;","import React from 'react';\r\nimport {DropTarget} from 'react-dnd';\r\nimport { NativeTypes } from 'react-dnd-html5-backend';\r\nimport styles from './DragDrop.module.css'\r\n\r\nconst spec = {\r\n\r\n    drop(props, monitor) {\r\n        let FilesData = []\r\n\r\n        const file = monitor.getItem().files\r\n            for (let i = 0; i < file.length; i++) {\r\n\r\n                const reader = new FileReader();\r\n              \r\n                    reader.onload = () => {\r\n                        (file[i].size < (5*1024*1024)) ?\r\n                        \r\n                        FilesData[i] = {\r\n                            name: file[i].name,\r\n                            content: reader.result.split(',')[1],\r\n                            encoding: \"base64\",\r\n                            size: file[i].size\r\n                        }\r\n                        :\r\n                        FilesData[i] = {\r\n                            name: file[i].name,\r\n                            content: '',\r\n                            encoding: \"base64\",\r\n                            size: file[i].size,\r\n                            error : 'максимальный размер файла 5Mb'\r\n                        }\r\n                        props.UpdateFiles(FilesData)\r\n                    }\r\n                        reader.readAsDataURL(file[i])\r\n\r\n            }\r\n            \r\n                props.UploadFilesToggler(false)\r\n                \r\n\r\n        \r\n    }\r\n}\r\n\r\nconst collect = (connect, monitor) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n});\r\n\r\n\r\nclass TargetBox extends React.Component {\r\n    render() {\r\n        const { connectDropTarget } = this.props;\r\n        return connectDropTarget(\r\n            <div className={styles.dropZone}>\r\n            <h2>Бросайте файлы сюда, я ловлю</h2>\r\n                    <p>Мы принимаем картинки (jpg, png, gif), офисные файлы (doc, xls, pdf) и zip-архивы. Размеры файла до 5 МБ</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropTarget(\r\n    NativeTypes.FILE,\r\n    spec,\r\n    collect\r\n)(TargetBox);","import React from 'react'\r\nimport styles from \"./Form.module.css\"\r\nimport File from '../File/File'\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport BasicFormSchema from \"../../validation/BasicScheme\";\r\nimport TargetBox from './../../DragDrop/DragDrop';\r\nimport { DndProvider } from 'react-dnd';\r\nimport Backend from 'react-dnd-html5-backend'\r\n\r\nconst MessageForm = (props) => {\r\n    //==== вывод файлов через input[file]\r\n    // // ===== Мониторинг полей формы ========\r\n    // let FileUpdate = async () => {\r\n    //     let Data = []\r\n    //     let Files = document.getElementById('file').files\r\n    //     for (let i = 0; i < Files.length; i++) {\r\n    //         Data.push({name : document.getElementById('file').files[i].name})\r\n    //     }\r\n    //     let d = await CatchFile(Files)\r\n    //     props.UpdateFiles(d)     \r\n    // // }\r\n  \r\n    // async function CatchFile(Files) {\r\n        \r\n    //     const FilesData =[]\r\n    //     for (let i = 0; i < Files.length; i++) {\r\n    //         let res = await new Promise((resolve, reject) => {\r\n    //             let reader = new FileReader()\r\n    //             reader.onload = function () {\r\n    //                 resolve(reader.result.split(',')[1])\r\n    //             };\r\n    //             reader.readAsDataURL(Files[i]);   \r\n    //         })\r\n    //         FilesData[i] = {\r\n    //             name: Files[i].name,\r\n    //             content: res,\r\n    //             encoding: \"base64\"\r\n    //         }\r\n           \r\n    //     }\r\n    //     return FilesData;\r\n    // }\r\n\r\n    return (\r\n        <> {props.state.UploadFiles &&\r\n            <DndProvider backend={Backend}>\r\n                <TargetBox  UpdateFiles = {props.UpdateFiles} UploadFilesToggler = {props.UploadFilesToggler}/>\r\n            </DndProvider>}\r\n        <Formik\r\n            //инициализируем значения input-ов\r\n            initialValues={{\r\n                for_email: '',\r\n                for_name: '',\r\n                from_email: '',\r\n                from_name: '',\r\n                theme: '',\r\n                message: '',\r\n            }}\r\n            //подключаем схему валидации, которую описали выше\r\n            validationSchema={BasicFormSchema}\r\n            //определяем, что будет происходить при вызове onsubmit\r\n            onSubmit={(values, { resetForm }) => {\r\n                values.status = 'В очереди'\r\n                props.SendMessage(values)\r\n                setTimeout(() => {\r\n                    resetForm()\r\n                }, 500);\r\n\r\n            }}\r\n\r\n            //свойство, где описывыем нашу форму\r\n            //errors-ошибки валидации формы\r\n            //touched-поля формы, которые мы \"затронули\",\r\n            //то есть, в которых что-то ввели\r\n            render={({ errors, touched, isValid }) => (\r\n                <Form action='' className={styles.container} encType='multipart/form-data'>\r\n                    <div className={styles.title}><h2>Отправлялка сообщений</h2></div>\r\n\r\n                    <div className={styles.form_blok}>\r\n\r\n                        <span className={styles.form_label}>От кого</span>\r\n\r\n                        <div className=\"form-row\">\r\n\r\n                            <div className={styles.col + \" col\"}>\r\n                                <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.from_name && touched.from_name && ' is-invalid')} name=\"from_name\" placeholder=\"Имя\" />\r\n\r\n                                <div className=\"invalid-feedback\">\r\n                                    {errors.from_name}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className={styles.col + \" col\"}>\r\n                                <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.from_email && touched.from_email && ' is-invalid')} name=\"from_email\" placeholder=\"Email\" />\r\n\r\n                                <div className=\"invalid-feedback\">\r\n                                    {errors.from_email}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={styles.form_blok}>\r\n                        <span className={styles.form_label}>Кому</span><br />\r\n                        <div className=\"form-row\">\r\n                            <div className={styles.col + \" col\"}>\r\n                                <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.for_name && touched.for_name && ' is-invalid')} name=\"for_name\" placeholder=\"Имя\" />\r\n\r\n                                <div className=\"invalid-feedback\">\r\n                                    {errors.for_name}\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.col + \" col\"}>\r\n                                <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.for_email && touched.for_email && ' is-invalid')} name=\"for_email\" placeholder=\"Email\" />\r\n                                <div className=\"invalid-feedback\">\r\n                                    {errors.for_email}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={styles.form_blok}>\r\n                        <span className={styles.form_label}>Тема письма</span><br />\r\n                        <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.theme && touched.theme && ' is-invalid')} name=\"theme\" placeholder=\" Тема\" />\r\n                        <div className=\"invalid-feedback\">\r\n                            {errors.theme}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={styles.form_blok}>\r\n\r\n                        <span className={styles.form_label}>Сообщение</span>\r\n                        <Field type=\"text\" className={styles.form_control + ' form-control ' + (errors.message && touched.message && ' is-invalid')} style={{ paddingTop: 15, paddingBottom: 90 }} name=\"message\" placeholder=\"Ваше сообщение\" />\r\n                        <div className=\"invalid-feedback\">\r\n                            {errors.message}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <File fileData={props.state.fileData} DeleteFile={props.DeleteFile} />\r\n\r\n                    {/* <div className={styles.form_file}>\r\n                        <label htmlFor=\"file\"><i className={styles.fa + \" fa fa-paperclip\"} aria-hidden=\"true\"></i> Прикрепить файл</label>\r\n                        <Field type=\"file\" id=\"file\" name=\"files\" multiple onChange={FileUpdate} />\r\n                    </div> */}\r\n\r\n                    <div className={styles.form_file} onClick={()=>{props.UploadFilesToggler(true)}}>\r\n                        <div className={styles.form_file_label}><i className={styles.fa + \" fa fa-paperclip\"} aria-hidden=\"true\"></i> Прикрепить файл</div>\r\n                    </div>\r\n\r\n\r\n                    <div className={styles.form_blok10}>\r\n                        <button type=\"submit\" className={styles.btn + \" btn btn-primary\"} disabled={!isValid}>Отправить</button>\r\n\r\n                        \r\n                    </div>\r\n\r\n\r\n                </Form>\r\n\r\n            )}\r\n\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MessageForm","import React from 'react'\r\nimport styles from './MessageStatus.module.css'\r\nconst MessageStatus = (props) => {\r\n    //Цвет статуса\r\n    let color\r\n    if (props.status === 'Отправлено') {\r\n        color = 'green'\r\n    }\r\n    else if (props.status === 'Ошибка') {\r\n        color = 'red'\r\n    }\r\n\r\n    return (\r\n        <div className={styles.header + \" row\"}>\r\n            <div className={\"col-2 \" + styles.data}>{props.date}</div>\r\n            <div className={\"col-8 \" + styles.theme}>{props.theme}</div>\r\n            <div className={\"col-2 \" + styles.status + \" \" + (color === 'green' && styles.green) + ' ' + (color === 'red' && styles.red)}>{props.status}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default MessageStatus","import React from 'react'\r\nimport styles from './MessagePage.module.css'\r\nimport MessageStatus from './MessageStatus'\r\n\r\n\r\n\r\nconst MessagePage = (props) => {\r\n\r\n    let MessageStatusItems = props.state.messageData.map((i, index) => <MessageStatus key={index} theme={i.theme} status={i.status} date={i.date} />)\r\n    return (\r\n        <div className={styles.container}>\r\n            <h4>Отправленные сообщения</h4>\r\n\r\n            {props.state.messageData.length === 0\r\n                ? <div>Сообщения ещё не отправлялись</div>\r\n\r\n                : <><div className={styles.header + \" row\"}>\r\n                    <div className={\"col-2 \" + styles.data}>Дата</div>\r\n                    <div className={\"col-8 \" + styles.theme}>Тема</div>\r\n                    <div className={\"col-2 \" + styles.status}>Статус</div>\r\n                </div>\r\n\r\n                    {MessageStatusItems}\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default MessagePage","import React from 'react'\r\nimport styles from \"./FormPage.module.css\"\r\nimport Form from '../Form/Form'\r\nimport MessagePage from '../MessagePage/MessagePage';\r\nconst FormPage = (props) => {\r\n    let Sending = !props.state.messageData.some(i => i.status === 'В очереди')\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            {Sending\r\n\r\n                ? <div className={styles.form}>\r\n                \r\n                    <Form {...props} />\r\n                </div>\r\n\r\n                : <div className={styles.loading}>\r\n                    <h2>Сообщение поставлено в очередь на отправку</h2>\r\n                    <p>Совсем скоро сообщение вылетит из сервера,\r\n                     и будет двигаться в сторону почты получателя\r\n                    «{props.state.messageData[props.state.messageData.length - 1].for_email}»\r\n                    со скоростью электронов.</p>\r\n                </div>\r\n            }\r\n            <MessagePage state={props.state} />\r\n\r\n            <button className=\"btn btn-danger\" onClick={() => props.ClearHistory()}>Очистить историю</button>\r\n        </div>\r\n    )\r\n}\r\nexport default FormPage","import Sendsay from 'sendsay-api';\r\n\r\nconst sendsay = new Sendsay({\r\n  auth: {\r\n    login: 'momentalochka@yandex.ru',\r\n    password: 'be7Bukeeg',\r\n  }\r\n});\r\n\r\n// === Интерфейс запросов ===\r\nexport const MessageApi = {\r\n  //==== Запрос о состоянии ====\r\n  Track(id) {\r\n    return (sendsay.request({\r\n      \"action\": \"track.get\",\r\n      \"id\": id,\r\n      \"session\": \"session\"\r\n    },\r\n    ))\r\n  },\r\n  //==== Отправка сообщения ====\r\n  SendMessage(data, files) {\r\n  \r\n    //==== Создаём пакет файлов ====\r\n    files = files.map(e => e = { 'name': `${e.name}`, 'content': `${e.content}`, 'encoding': `${e.encoding}` })\r\n    return (\r\n      sendsay.request({\r\n\r\n        \"action\": \"issue.send\",\r\n        \"letter\": {\r\n          \"subject\": data.theme,\r\n          \"from.name\": data.from_name,\r\n          \"from.email\": data.from_email,\r\n          \"to.name\": data.for_name,\r\n          \"message\": { \"text\": data.message },\r\n          \"attaches\": files\r\n          // {\r\n          //   \"name\": `${files[0].name}`,\r\n          //   \"content\": `${files[0].content}`,\r\n          //   \"encoding\": \"base64\"\r\n          // },\r\n        },\r\n        \"sendwhen\": \"test\",\r\n        \"mca\": [\r\n          data.for_email,\r\n        ]\r\n      }\r\n      ))\r\n  }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport FormPage from './components/FormPage/FormPage';\r\nimport { MessageApi } from './Api/MessageApi';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  // ==== Подгружаем инициализационные данные(если есть) ====\r\n  componentWillMount() {\r\n    localStorage.getItem('state')\r\n      ? this.setState({\r\n        ...JSON.parse(localStorage.getItem('state')),\r\n        UploadFiles : false,\r\n        fileData: []\r\n      })\r\n      : this.setState({\r\n        fileData: [],\r\n        messageData: [],\r\n        UploadFiles : false\r\n      })\r\n  }\r\n  componentWillUpdate(nextProps, nextState) {\r\n\r\n    localStorage.setItem('state', JSON.stringify({ ...nextState }))\r\n  }\r\n\r\n  // Отправка формы \r\n  SendMessage = (data) => {\r\n    //==== Формируем время отправки сообщения ====\r\n    let monthList = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря']\r\n    let month = monthList[new Date().getMonth()];\r\n    let day = new Date().getDate();\r\n    data.date = day + ' ' + month;\r\n\r\n    //==== Добавляем поле время объекту с сообщением ====\r\n    this.setState({\r\n      messageData: [...this.state.messageData, { ...data }],\r\n    })\r\n\r\n\r\n\r\n    //==== Отправка сообщения ====\r\n    let files = this.state.fileData\r\n\r\n    MessageApi.SendMessage(data, files)\r\n      .then((res) => {\r\n        let check = setInterval((res) => {\r\n          //==== ожидание завершения отправки ====\r\n          MessageApi.Track(res['track.id'])\r\n            .then((res) => {\r\n\r\n              //==== при успешной отправке ====\r\n              if (res.obj.status === '-1') {\r\n                clearTimeout(check)\r\n                let last = this.state.messageData.pop()\r\n                last.status = 'Отправлено'\r\n                this.setState({\r\n                  messageData: [...this.state.messageData, { ...last }],\r\n                  fileData: [],\r\n                })\r\n              }\r\n              //==== при ошибке ====\r\n              else if (res.obj.status === '-2') {\r\n                clearTimeout(check)\r\n                let last = this.state.messageData.pop()\r\n                last.status = 'Ошибка'\r\n                this.setState({\r\n                  messageData: [...this.state.messageData, { ...last }],\r\n                  fileData: [],\r\n                })\r\n              }\r\n\r\n            });\r\n        }, 5000, res, this.state)\r\n      })\r\n  };\r\n\r\n  //==== Загрузка выбранных файлов ====\r\n  UpdateFiles = (data) => {\r\n    this.setState({\r\n      fileData: data,\r\n    })\r\n  };\r\n\r\n  //==== Удаление файла из списка выбраннных ====\r\n  DeleteFile = (index) => {\r\n    let copyFileData = [...this.state.fileData]\r\n    copyFileData.splice(index, 1)\r\n    this.setState({\r\n      fileData: copyFileData\r\n    })\r\n  };\r\n\r\n  // ==== Очистка localstorage ==== \r\n  ClearHistory = () => {\r\n    localStorage.removeItem('state')\r\n    setTimeout(() => {\r\n      this.setState({\r\n        messageData: [],\r\n      })\r\n    }, 300);\r\n  };\r\n\r\n  UploadFilesToggler = (status) =>{\r\n    this.setState({\r\n      UploadFiles : status\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FormPage UpdateFiles={this.UpdateFiles} state={this.state} DeleteFile={this.DeleteFile} Validate={this.Validate} SendMessage={this.SendMessage} ClearHistory={this.ClearHistory} UploadFilesToggler = {this.UploadFilesToggler} />\r\n    )\r\n\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './Css/bootstrap.css';\r\nimport './Css/font-awesome-4.7.0/css/font-awesome.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}